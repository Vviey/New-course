import { useState } from "react";
import { useLocation } from "wouter";
import { useAuth } from "@/context/AuthContext";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Loader2, Eye, EyeOff } from "lucide-react";

// Form schemas
const loginSchema = z.object({
  username: z.string().min(3, "Username must be at least 3 characters").max(50),
  password: z.string().min(6, "Password must be at least 6 characters"),
});

const registerSchema = z.object({
  username: z.string().min(3, "Username must be at least 3 characters").max(50),
  email: z.string().email("Please enter a valid email").optional().or(z.literal("")),
  password: z.string().min(6, "Password must be at least 6 characters"),
  confirmPassword: z.string().min(6, "Password must be at least 6 characters"),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords do not match",
  path: ["confirmPassword"],
});

type LoginFormValues = z.infer<typeof loginSchema>;
type RegisterFormValues = z.infer<typeof registerSchema>;

export default function AuthPage() {
  const [isLogin, setIsLogin] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { login, register, isAuthenticated } = useAuth();
  const [, setLocation] = useLocation();
  
  // For animated quotes
  const [ashaQuoteIndex, setAshaQuoteIndex] = useState(0);
  const [guideQuoteIndex, setGuideQuoteIndex] = useState(0);
  const [fadeIn, setFadeIn] = useState(true);
  
  // Rotate quotes every 7 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setFadeIn(false);
      setTimeout(() => {
        setAshaQuoteIndex(prev => (prev + 1) % ashaQuotes.length);
        setGuideQuoteIndex(prev => (prev + 1) % guideQuotes.length);
        setFadeIn(true);
      }, 500);
    }, 7000);
    
    return () => clearInterval(interval);
  }, []);
  
  // If user is authenticated, redirect to intro page
  if (isAuthenticated) {
    setTimeout(() => {
      setLocation("/intro");
    }, 0);
    
    return (
      <div className="flex items-center justify-center min-h-screen bg-amber-900">
        <Loader2 className="h-8 w-8 animate-spin text-amber-100" />
        <span className="ml-2 text-amber-100">Entering the realm...</span>
      </div>
    );
  }
  
  // Login form
  const loginForm = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });
  
  // Register form
  const registerForm = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
  });
  
  const onLoginSubmit = (data: LoginFormValues) => {
    setIsSubmitting(true);
    try {
      login(data.username, data.password);
      setLocation("/intro"); // Navigate to story intro page after login
    } catch (error) {
      console.error("Login failed", error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const onRegisterSubmit = (data: RegisterFormValues) => {
    setIsSubmitting(true);
    try {
      // Remove confirmPassword as it's not needed
      const { confirmPassword, ...registerData } = data;
      register(registerData.username, registerData.password, registerData.email || undefined);
      setLocation("/intro"); // Navigate to story intro page after registration
    } catch (error) {
      console.error("Registration failed", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col md:flex-row">
      {/* Authentication Form with African-inspired design elements */}
      <div className="flex-1 flex items-center justify-center p-6 md:p-12 bg-gradient-to-b from-amber-50 to-amber-100">
        <div className="w-full max-w-md space-y-6">
          <div className="text-center">
            <div className="mx-auto w-20 h-20 bg-amber-900 rounded-full flex items-center justify-center mb-4 shadow-lg">
              <Shield className="h-10 w-10 text-amber-100" />
            </div>
            <h1 className="text-3xl font-extrabold tracking-tight text-amber-900">
              {isLogin ? "Return to the Journey" : "Begin Your Quest"}
            </h1>
            <p className="mt-2 text-sm text-amber-700">
              {isLogin
                ? "Sign in to continue your adventure with Asha" 
                : "Create an account to join Asha's adventure"}
            </p>
          </div>

          {/* Tab Selector with African-inspired styles */}
          <div className="flex rounded-md border border-amber-300 shadow-sm p-1 bg-amber-100/50">
            <button 
              className={`flex-1 py-2 text-sm font-medium rounded-md transition-colors ${isLogin ? "bg-amber-800 text-white shadow-sm" : "text-amber-800 hover:bg-amber-200"}`}
              onClick={() => setIsLogin(true)}
            >
              Return
            </button>
            <button 
              className={`flex-1 py-2 text-sm font-medium rounded-md transition-colors ${!isLogin ? "bg-amber-800 text-white shadow-sm" : "text-amber-800 hover:bg-amber-200"}`}
              onClick={() => setIsLogin(false)}
            >
              New Journey
            </button>
          </div>

          {isLogin ? (
            /* Login Form with African-inspired styles */
            <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-amber-800" htmlFor="username">
                  Your Name
                </label>
                <div className="relative">
                  <input
                    {...loginForm.register("username")}
                    id="username"
                    type="text"
                    className="w-full pl-10 pr-3 py-2 border border-amber-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent bg-white/80"
                    placeholder="Enter your name"
                  />
                  <User className="absolute left-3 top-2.5 h-5 w-5 text-amber-500" />
                </div>
                {loginForm.formState.errors.username && (
                  <p className="text-sm text-red-600">{loginForm.formState.errors.username.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-amber-800" htmlFor="password">
                  Secret Word
                </label>
                <div className="relative">
                  <input
                    {...loginForm.register("password")}
                    id="password"
                    type={showPassword ? "text" : "password"}
                    className="w-full pl-10 pr-10 py-2 border border-amber-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent bg-white/80"
                    placeholder="Enter your secret word"
                  />
                  <Shield className="absolute left-3 top-2.5 h-5 w-5 text-amber-500" />
                  <button 
                    type="button"
                    className="absolute right-3 top-2.5 text-amber-500 hover:text-amber-700"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
                  </button>
                </div>
                {loginForm.formState.errors.password && (
                  <p className="text-sm text-red-600">{loginForm.formState.errors.password.message}</p>
                )}
              </div>

              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full py-3 px-4 border border-transparent rounded-md shadow-md text-sm font-medium text-white bg-amber-800 hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 transition-all duration-200 transform hover:-translate-y-1"
              >
                {isSubmitting ? <Loader2 className="h-5 w-5 animate-spin mx-auto" /> : "Continue Your Journey"}
              </button>
            </form>
          ) : (
            /* Register Form with African-inspired styles */
            <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium text-amber-800" htmlFor="register-username">
                  Choose Your Name
                </label>
                <div className="relative">
                  <input
                    {...registerForm.register("username")}
                    id="register-username"
                    type="text"
                    className="w-full pl-10 pr-3 py-2 border border-amber-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent bg-white/80"
                    placeholder="What shall we call you?"
                  />
                  <User className="absolute left-3 top-2.5 h-5 w-5 text-amber-500" />
                </div>
                {registerForm.formState.errors.username && (
                  <p className="text-sm text-red-600">{registerForm.formState.errors.username.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-amber-800" htmlFor="register-email">
                  Message Bird (optional)
                </label>
                <input
                  {...registerForm.register("email")}
                  id="register-email"
                  type="email"
                  className="w-full pl-3 pr-3 py-2 border border-amber-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent bg-white/80"
                  placeholder="Your email (to recover your journey)"
                />
                {registerForm.formState.errors.email && (
                  <p className="text-sm text-red-600">{registerForm.formState.errors.email.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-amber-800" htmlFor="register-password">
                  Create Secret Word
                </label>
                <div className="relative">
                  <input
                    {...registerForm.register("password")}
                    id="register-password"
                    type={showPassword ? "text" : "password"}
                    className="w-full pl-10 pr-10 py-2 border border-amber-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent bg-white/80"
                    placeholder="Choose a secret word"
                  />
                  <Shield className="absolute left-3 top-2.5 h-5 w-5 text-amber-500" />
                  <button 
                    type="button"
                    className="absolute right-3 top-2.5 text-amber-500 hover:text-amber-700"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
                  </button>
                </div>
                {registerForm.formState.errors.password && (
                  <p className="text-sm text-red-600">{registerForm.formState.errors.password.message}</p>
                )}
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium text-amber-800" htmlFor="register-confirm-password">
                  Confirm Secret Word
                </label>
                <div className="relative">
                  <input
                    {...registerForm.register("confirmPassword")}
                    id="register-confirm-password"
                    type={showConfirmPassword ? "text" : "password"}
                    className="w-full pl-10 pr-10 py-2 border border-amber-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent bg-white/80"
                    placeholder="Repeat your secret word"
                  />
                  <Shield className="absolute left-3 top-2.5 h-5 w-5 text-amber-500" />
                  <button 
                    type="button"
                    className="absolute right-3 top-2.5 text-amber-500 hover:text-amber-700"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  >
                    {showConfirmPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />}
                  </button>
                </div>
                {registerForm.formState.errors.confirmPassword && (
                  <p className="text-sm text-red-600">{registerForm.formState.errors.confirmPassword.message}</p>
                )}
              </div>

              <button
                type="submit"
                disabled={isSubmitting}
                className="w-full py-3 px-4 border border-transparent rounded-md shadow-md text-sm font-medium text-white bg-amber-800 hover:bg-amber-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500 transition-all duration-200 transform hover:-translate-y-1"
              >
                {isSubmitting ? <Loader2 className="h-5 w-5 animate-spin mx-auto" /> : "Begin Your Journey"}
              </button>
            </form>
          )}
        </div>
      </div>

      {/* Hero Section with African story elements */}
      <div className="flex-1 bg-gradient-to-br from-amber-900 to-amber-950 p-6 md:p-12 flex items-center justify-center text-amber-100">
        <div className="max-w-md space-y-8">
          <div className="text-center">
            <h2 className="text-4xl font-bold tracking-tight mb-2">Asha's Journey</h2>
            <div className="h-1 w-24 bg-amber-500 mx-auto mb-6"></div>
            <p className="text-lg text-amber-200 italic">Through the Realms of Money</p>
          </div>
          
          {/* Character dialogue section */}
          <div className="space-y-6 mt-8">
            {/* Asha character dialogue */}
            <div className="flex items-start space-x-4">
              <div className="w-12 h-12 rounded-full bg-amber-800 flex-shrink-0 flex items-center justify-center">
                <span className="text-amber-100 font-bold">A</span>
              </div>
              <div className="bg-amber-800/30 p-4 rounded-lg rounded-tl-none flex-1">
                <p className="font-medium text-amber-100 mb-1">Asha</p>
                <p className={`text-amber-200 transition-opacity duration-500 ${fadeIn ? 'opacity-100' : 'opacity-0'}`}>
                  {ashaQuotes[ashaQuoteIndex]}
                </p>
              </div>
            </div>
            
            {/* Guide/Mekatiriri character dialogue */}
            <div className="flex items-start space-x-4">
              <div className="w-12 h-12 rounded-full bg-amber-700 flex-shrink-0 flex items-center justify-center">
                <span className="text-amber-100 font-bold">M</span>
              </div>
              <div className="bg-amber-700/30 p-4 rounded-lg rounded-tl-none flex-1">
                <p className="font-medium text-amber-100 mb-1">Mekatiriri</p>
                <p className={`text-amber-200 transition-opacity duration-500 ${fadeIn ? 'opacity-100' : 'opacity-0'}`}>
                  {guideQuotes[guideQuoteIndex]}
                </p>
              </div>
            </div>
          </div>
          
          {/* Journey highlights */}
          <div className="mt-8 space-y-4 bg-amber-800/20 p-5 rounded-lg">
            <h3 className="text-xl font-semibold text-amber-200">Your Quest</h3>
            <div className="space-y-3">
              <div className="flex items-center space-x-3">
                <div className="flex-shrink-0 h-6 w-6 rounded-full bg-amber-600 flex items-center justify-center text-sm font-semibold">1</div>
                <p className="text-amber-200 text-sm">
                  Explore 7 unique realms of monetary knowledge
                </p>
              </div>
              <div className="flex items-center space-x-3">
                <div className="flex-shrink-0 h-6 w-6 rounded-full bg-amber-600 flex items-center justify-center text-sm font-semibold">2</div>
                <p className="text-amber-200 text-sm">
                  Complete challenges and earn badges of wisdom
                </p>
              </div>
              <div className="flex items-center space-x-3">
                <div className="flex-shrink-0 h-6 w-6 rounded-full bg-amber-600 flex items-center justify-center text-sm font-semibold">3</div>
                <p className="text-amber-200 text-sm">
                  Master Bitcoin knowledge through African perspectives
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
