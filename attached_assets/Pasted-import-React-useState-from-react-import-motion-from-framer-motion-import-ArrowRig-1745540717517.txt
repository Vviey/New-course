import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { ArrowRight, DollarSign, Droplet, Landmark } from 'lucide-react';

const GlobalMoneyWebSimulation = () => {
    const [connections, setConnections] = useState([]);
    const [dragStart, setDragStart] = useState(null);
    
    const nodes = [
        { id: 'usa', label: 'United States', type: 'source', x: 200, y: 100 },
        { id: 'oil', label: 'Oil Producers', type: 'target', x: 400, y: 200 },
        { id: 'debt', label: 'Debt Holders', type: 'target', x: 200, y: 300 },
        { id: 'africa', label: 'African Nations', type: 'target', x: 400, y: 400 }
    ];

    const handleDragStart = (nodeId) => {
        setDragStart(nodeId);
    };

    const handleDragEnd = (endNodeId) => {
        if (dragStart && dragStart !== endNodeId) {
            setConnections([...connections, {
                from: dragStart,
                to: endNodeId
            }]);
        }
        setDragStart(null);
    };

    return (
        <div className="bg-[#FBF4D2] p-6 rounded-lg shadow-lg">
            <h2 className="text-2xl font-bold text-[#EE720B] mb-6">
                Global Money Web Simulator
            </h2>
            
            <div className="relative h-96 border-2 border-[#FFC567] rounded-lg bg-white">
                {nodes.map((node) => (
                    <motion.div
                        key={node.id}
                        className="absolute cursor-pointer"
                        style={{ left: node.x, top: node.y }}
                        whileHover={{ scale: 1.1 }}
                    >
                        <div 
                            className="flex items-center justify-center w-24 h-24 rounded-full bg-[#EE720B] text-white"
                            onMouseDown={() => handleDragStart(node.id)}
                            onMouseUp={() => handleDragEnd(node.id)}
                        >
                            {node.type === 'source' ? <DollarSign size={24} /> : 
                             node.id === 'oil' ? <Droplet size={24} /> :
                             node.id === 'debt' ? <Landmark size={24} /> :
                             <ArrowRight size={24} />}
                            <div className="text-sm mt-2">{node.label}</div>
                        </div>
                    </motion.div>
                ))}
                
                {connections.map((connection, idx) => {
                    const start = nodes.find(n => n.id === connection.from);
                    const end = nodes.find(n => n.id === connection.to);
                    return (
                        <svg key={idx} className="absolute top-0 left-0 w-full h-full pointer-events-none">
                            <line
                                x1={start.x + 48}
                                y1={start.y + 48}
                                x2={end.x + 48}
                                y2={end.y + 48}
                                stroke="#FFC567"
                                strokeWidth="3"
                            />
                        </svg>
                    );
                })}
            </div>
            
            <div className="mt-4 p-4 bg-white rounded-lg">
                <h3 className="font-bold text-[#EE720B]">Learning Points:</h3>
                <ul className="list-disc ml-6 mt-2">
                    <li>Understanding the petrodollar system</li>
                    <li>Global dollar dominance mechanisms</li>
                    <li>Impact of debt dependency</li>
                    <li>Power dynamics in international finance</li>
                </ul>
            </div>
        </div>
    );
};

export default GlobalMoneyWebSimulation;