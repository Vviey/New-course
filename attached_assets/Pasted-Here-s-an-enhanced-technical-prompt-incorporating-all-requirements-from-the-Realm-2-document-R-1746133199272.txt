Here's an enhanced technical prompt incorporating all requirements from the Realm 2 document:

**Realm 2 Technical Implementation Requirements**

1. **Architecture**  
   - Convert all missions to React + JSS  
   - Create hierarchical folder structure:  
   ```
   src/realms/Realm2/  
   ├── index.tsx                  # Story introduction  
   ├── Mission1/  
   │   ├── index.tsx              # Main mission component  
   │   ├── Challenges/            # Challenge components  
   │   │   ├── CentralBankSimulator.tsx  
   │   │   ├── HistoricalTimeline.tsx  
   │   │   └── CaseAnalysis.tsx  
   ├── ...                        # Repeat for Missions 2-6  
   ├── BonusMission/  
   ├── components/                # Shared components  
   │   ├── RealmLayout.tsx        # Wrapper with progress tracking  
   │   ├── SimulationFrame.tsx    # Reusable simulation container  
   │   └── HeatmapVisualizer.tsx  # Shared visualization component  
   └── styles/  
       ├── theme.ts               # Centralized style config  
       └── missionStyles.ts       # Shared JSS styles  
   ```

2. **Routing & Flow**  
   Implement sequential navigation:  
   ```tsx
   <Route path="/realm2" element={<Realm2Intro />} />  
   <Route path="/realm2/mission1" element={<Mission1 />} />  
   ...  
   <Route path="/realm2/bonus" element={<BonusMission />} />
   ```
   - Lock subsequent missions until previous ones complete  
   - Maintain progress state via Context API  

3. **Design System Requirements**  
   ```ts
   // theme.ts
   export const realm2Theme = {
     colors: {
       primary: '#EE720B',        // Citadel Orange  
       surveillance: '#5B8C5A',   // Camouflage Green  
       exclusion: '#BB4430',      // Earthy Red  
       currency: '#FFC567',       // Golden Yellow  
       background: '#FBF4D2'      // Parchment
     },
     fonts: {
       heading: 'Satoshi Black',  
       body: 'Satoshi Medium'
     },
     shadows: {
       control: '0 4px 6px rgba(238, 114, 11, 0.2)',  
       surveillance: '0 4px 12px rgba(91, 140, 90, 0.25)'
     }
   };
   ```

4. **Key Interactive Components**  
   Implement prioritized simulations as reusable React components:  
   - `GlobalMoneyFlowDiagram.tsx` (Mission 2.6)  
   - `RolePlayDecisionSimulator.tsx` (Mission 2.1)  
   - `PrivacyHeatmap.tsx` (Mission 2.3)  
   - `ExclusionWebVisualizer.tsx` (Mission 2.4)  

5. **State Management**  
   ```tsx
   interface Realm2State {
     completedMissions: string[];  
     simulationProgress: {
       [key: string]: number;  // Track progress per challenge
     };
     unlockedBonuses: string[];
   }
   ```
   - Persist state to localStorage/IndexedDB  
   - Implement achievement system with badges:  
     `FinancialSovereigntyBadge.tsx`, `PrivacyChampionBadge.tsx`

6. **Responsive Requirements**  
   - All simulations must adapt to:  
     - Desktop: 1200px+ (complex visualizations)  
     - Tablet: 768px+ (simplified controls)  
     - Mobile: <768px (vertical layouts)  
   - Touch-optimized drag interactions for mobile web

7. **Accessibility**  
   - AA compliance for color contrasts  
   - Screen reader support for simulations  
   - Keyboard navigation for interactive elements  
   - Reduced motion alternatives for animations

8. **Analytics Integration**  
   Track:  
   - Time spent per challenge  
   - Simulation outcomes  
   - Paths through decision trees  
   - Barrier resolution attempts (Mission 2.4)  

This structure maintains narrative flow while enabling technical scalability. Each mission becomes a self-contained React module sharing common styling and components through the centralized theme system.